1. (a) Write a program in assembly language to find L.C.M of two
single-digit numbers.
.model small
.stack 100h
.data
num1 db 8
num2 db 4
gcd_res db 0
lcm_res dw 0
msg db &#39;LCM is: $&#39;
.code
main:
mov ax, @data
mov ds, ax
mov al, num1
mov bl, num2
call gcd
mov gcd_res, al
mov al, num1
mov ah, 0
mov dl, num2
mul dl
mov cl, gcd_res
div cl
mov lcm_res, ax
mov ah, 09h
lea dx, msg
int 21h
mov ax, lcm_res
call print_num
mov ah, 4Ch
int 21h
gcd proc
cmp bl, 0
je end_gcd
gcd_loop:
mov ah, 0
div bl
mov al, bl
mov bl, ah

cmp bl, 0
jne gcd_loop
end_gcd:
ret
gcd endp
print_num proc
mov cx, 0
mov bx, 10
convert_loop:
xor dx, dx
div bx
push dx
inc cx
cmp ax, 0
jne convert_loop
print_digits:
pop dx
add dl, &#39;0&#39;
mov ah, 02h
int 21h
loop print_digits
ret
print_num endp
end main

(b) Write an assembly language program to display the nth term
of a fibonacci series. “n” must be a single digit number which may
be taken from the user.
.model small
.stack 100h
.data
    num1 db 8
    num2 db 4
    gcd_res db 0
    lcm_res dw 0
    msg db 'LCM is: $'
.code
main:
    mov ax, @data
    mov ds, ax
    mov al, num1
    mov bl, num2
    call gcd
    mov gcd_res, al
    mov al, num1
    mov ah, 0
    mov dl, num2
    mul dl
    mov cl, gcd_res
    div cl
    mov lcm_res, ax
    mov ah, 09h
    lea dx, msg
    int 21h
    mov ax, lcm_res
    call print_num
    mov ah, 4Ch
    int 21h

gcd proc
    cmp bl, 0
    je end_gcd
gcd_loop:
    mov ah, 0
    div bl
    mov al, bl
    mov bl, ah
    cmp bl, 0
    jne gcd_loop
end_gcd:
    ret
gcd endp

print_num proc
    mov cx, 0
    mov bx, 10
convert_loop:
    xor dx, dx
    div bx
    push dx
    inc cx
    cmp ax, 0
    jne convert_loop
print_digits:
    pop dx
    add dl, '0'
    mov ah, 02h
    int 21h
    loop print_digits
    ret
print_num endp
end main

2. Write an assembly language program to find the factorial of a
given single-digit number.
.model small
.stack 100h
.data
    prompt db 'Enter a single digit number <n>: $'
    result_msg db 0Dh,0Ah,'The nth Fibonacci number is: $'
    fib dw 0
.code
main proc
    mov ax, @data
    mov ds, ax
    mov ah, 09h
    lea dx, prompt
    int 21h
    mov ah, 01h
    int 21h
    sub al, '0'
    mov cl, al
    cmp cl, 1
    jbe single_digit_fib
    mov ax, 0
    mov bx, 1
fib_loop:
    dec cl
    jz store_result
    add ax, bx
    xchg ax, bx
    jmp fib_loop
store_result:
    mov fib, ax
single_digit_fib:
    cmp cl, 0
    je show_fib0
    mov fib, bx
    jmp display_result
show_fib0:
    mov fib, ax
display_result:
    mov ah, 09h
    lea dx, result_msg
    int 21h
    mov ax, fib
    call print_number
    mov ah, 4Ch
    int 21h
main endp

print_number proc
    mov cx, 10
    mov bx, 0
reverse_digits:
    xor dx, dx
    div cx
    push dx
    inc bx
    test ax, ax
    jnz reverse_digits
display_digits:
    pop dx
    add dl, '0'
    mov ah, 02h
    int 21h
    dec bx
    jnz display_digits
    ret
print_number endp
end main
